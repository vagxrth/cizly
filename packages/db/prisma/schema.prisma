// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  email         String         @unique
  password      String
  canvases      Canvas[]
  rooms         Room[]        @relation("RoomAdmin")
  messages      Message[]
  canvasMessages CanvasMessage[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Canvas {
  id          String         @id @default(cuid())
  title       String
  description String?
  width       Int
  height      Int
  content     String        // JSON string of canvas content
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  messages    CanvasMessage[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId])
}

model Room {
  id        String    @id @default(uuid())
  roomName  String    @unique
  createdAt DateTime  @default(now())
  adminId   String
  admin     User      @relation("RoomAdmin", fields: [adminId], references: [id])
  messages  Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model CanvasMessage {
  id        String   @id @default(cuid())
  content   String   // JSON string of shape data
  canvasId  String
  canvas    Canvas   @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([canvasId])
  @@index([userId])
}
